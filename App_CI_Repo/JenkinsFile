pipeline {
  // in case i want to use a docker agent
  // agent {
  //   docker {
  //     image '' // specify image, in most cases DevOps Engineers need to write the Dockerfile for this image
  //     args '--user root -v /var/run/docker.sock:/var/run/docker.sock' // mount Docker socket to access the host's Docker daemon
  //   }
  // }
  agent {
      node {
          label 'my-host-agent' // Use the label assigned in the configuration
      }
  }

  triggers {
        pollSCM '*/1 * * * *'
  }

  // environment {
  //       DOCKER_IMAGE = 'faroukcha69/jenkins_java_ci'
  // }

  stages {
    // stage('Checkout') {
    //   steps {
    //     sh 'echo passed'
    //     //git branch: 'main', url: '' // you can pass the git repo here
    //   }
    // }

    stage('Clone repository') {
            steps {
                checkout scm
            }
        }

    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // create a JAR file and build the docker image
        sh 'cd App_CI_Repo && mvn clean package'
      //   script {
      //       // Declare and initialize `app` inside the script block
      //           def app = docker.build("${DOCKER_IMAGE}")
                    
      //               // Save `app` for use in later stages by using a global environment variable
      //               env.DOCKER_IMAGE_ID = app.imageName()
      //           }
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://localhost:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd App_CI_Repo && mvn sonar:sonar -Dsonar.token=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "faroukcha69/jenkins_java_ci:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "Jenkins_Java_Maven_Sonar_ArgoCD_Helm_K3S/App_CI_Repo/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('dockerhub') // can use this 
      }
      steps {
        script {
            sh 'cd App_CI_Repo && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://registry.hub.docker.com', 'dockerhub') {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins_Java_Maven_Sonar_ArgoCD_Helm_K3S"
            GIT_CREDENTIALS_ID = 'github' // ID for GitHub credentials
        }
        steps {
            withCredentials([usernamePassword(credentialsId: "${GIT_CREDENTIALS_ID}", passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
                sh '''
                    git config user.email "farouk.echcharef@usmba.ac.ma"
                    git config user.name "Farouk-Echaref"

                    # Attach HEAD to the master branch
                    git pull https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GIT_USERNAME}/${GIT_REPO_NAME} master

                    echo $PWD
                    BUILD_NUMBER=${BUILD_NUMBER}
                    sed -i 's+faroukcha69/jenkins_java_ci.*+faroukcha69/jenkins_java_ci:${BUILD_NUMBER}+g' App_CD_Repo/deployment.yml
                    git add App_CD_Repo/deployment.yml
                    # git add .
                    git commit -m "Update deployment image to version ${BUILD_NUMBER}"
                    git push https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${GIT_USERNAME}/${GIT_REPO_NAME} HEAD:master
                '''
            }
        }
    }
  }
  post {
        always {
            echo 'Pipeline completed.'
        }

        success {
            echo 'Pipeline succeeded!'
        }

        failure {
            echo 'Pipeline failed!'
        }

        // Uncomment this section if you want to include cleanup logic
        // cleanup {
        //     script {
        //         // Optional cleanup logic, e.g., remove unused Docker images
        //         sh 'docker image prune -f'
        //     }
        // }
    }
}
